{"version":3,"sources":["Context/DataListContext.js","Components/DataOutput.js","Components/DataList.js","Components/DataForm.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DataListContext","createContext","DataListContextProvider","props","initialState","title","Email","Pnumber","id","uuid","useState","Data","setData","editItem","setEditItem","Provider","value","addTask","removeTask","filter","task","findItem","item","find","editTask","newTasks","map","console","log","children","DataOutput","useContext","className","onClick","DataList","length","key","DataForm","setTitle","setEmail","setPhoneNumber","useEffect","onSubmit","e","preventDefault","valid","match","alert","validate","type","placeholder","onChange","target","required","Header","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c93e59f8.chunk.js","sourcesContent":["import React, { createContext, useState} from 'react'\r\nimport uuid from 'uuid'\r\n\r\nexport const DataListContext = createContext()\r\n\r\nconst DataListContextProvider = props => {\r\n  const initialState = [\r\n    {title:\"abc\", Email:\"abc@tc.com\", Pnumber:\"9999999999\", id:uuid()},\r\n    {title:\"xyz\", Email:\"xyz@tc.com\", Pnumber:\"8888888888\", id:uuid()},\r\n    {title:\"qwe\", Email:\"qwe@tc.com\", Pnumber:\"7777777777\", id:uuid()}\r\n]\r\n\r\n  const [Data, setData] = useState(initialState)\r\n\r\n  const [editItem, setEditItem] = useState(null)\r\n\r\n \r\n  const addTask = (title,Email,Pnumber) => {\r\n    setData([...Data, { title, Email, Pnumber, id: uuid() }])\r\n  }\r\n\r\n \r\n  const removeTask = id => {\r\n    setData(Data.filter(task => task.id !== id))\r\n  }\r\n\r\n   \r\n  const findItem = id => {\r\n    const item = Data.find(task => task.id === id)\r\n\r\n    setEditItem(item)\r\n  }\r\n\r\n  \r\n  const editTask = (title, Email, Pnumber, id) => {\r\n    const newTasks = Data.map(task => (task.id === id ? { title, Email, Pnumber, id } : task))\r\n\r\n    console.log(newTasks)\r\n\r\n    setData(newTasks)\r\n    setEditItem(null)\r\n  }\r\n\r\n  return (\r\n    <DataListContext.Provider\r\n      value={{\r\n        Data,\r\n        addTask,\r\n        removeTask,\r\n        findItem,\r\n        editTask,\r\n        editItem\r\n      }}\r\n    >\r\n      {props.children}\r\n    </DataListContext.Provider>\r\n  )\r\n}\r\n\r\nexport default DataListContextProvider\r\n","import React, { useContext } from 'react'\r\nimport { DataListContext } from '../Context/DataListContext'\r\n\r\nconst DataOutput = ({ task }) => {\r\n  const { removeTask, findItem } = useContext(DataListContext)\r\n  return (\r\n    <li className=\"list-item\">\r\n      <span>{task.title} </span>\r\n      <span>{task.Email} </span>\r\n      <span>{task.Pnumber}</span>\r\n      <div>\r\n        <button\r\n          className=\"btn-delete task-btn\"\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n          <i className=\"fas fa-trash-alt\"></i>\r\n        </button>{' '}\r\n        <button className=\"btn-edit task-btn\" onClick={() => findItem(task.id)}>\r\n          <i className=\"fas fa-pen\"></i>\r\n        </button>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default DataOutput\r\n","import React, { useContext } from \"react\";\r\nimport { DataListContext } from \"../Context/DataListContext\";\r\nimport DataOutput from \"./DataOutput\";\r\n\r\nconst DataList = () => {\r\n  const { Data } = useContext(DataListContext);\r\n\r\n  return (\r\n    <div>\r\n      {Data.length ? (\r\n        <ul className=\"list\">\r\n          {Data.map(task => {\r\n            return <DataOutput task = {task} key={task.id} />;\r\n            })}\r\n        </ul>\r\n      ) : (\r\n        <div className=\"no-tasks\">No Tasks</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataList;\r\n","import React, { useState, useContext, useEffect } from 'react'\r\nimport { DataListContext} from '../Context/DataListContext'\r\n\r\nconst DataForm = () => {\r\n  const { addTask, editTask, editItem } = useContext(DataListContext)\r\n  const [title, setTitle] = useState('')\r\n  const [Email, setEmail] = useState('')\r\n  const [Pnumber, setPhoneNumber] = useState('')\r\n  \r\n\r\n  const validate = () => {\r\n    const mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;    \r\n    const phonenoFormat = /^\\d{10}$/;\r\n    if(!Email.match(mailformat)) {alert(\"Enter valid Email id\"); }\r\n      else {if(!Pnumber.match(phonenoFormat)) {alert(\"Enter valid Phone Number\");}\r\n               else {\r\n                 return true\r\n                 }\r\n              }\r\n     return false\r\n   }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    const valid = validate()\r\n    console.log(valid)\r\n    if (valid===true) {\r\n      if (!editItem) {\r\n      addTask(title,Email,Pnumber)\r\n      setTitle('')\r\n      setEmail('')\r\n      setPhoneNumber('')\r\n    } else {\r\n      editTask(title, Email, Pnumber, editItem.id)\r\n    }} else {console.log(valid)} } \r\n   \r\n  \r\n  const clearList = () => {\r\n      setTitle('')\r\n      setEmail('')\r\n      setPhoneNumber('')\r\n  }\r\n  const nameHandleChange = e => {\r\n    setTitle(e.target.value)\r\n  }\r\n  const emailHandleChange = e => {\r\n    setEmail(e.target.value)\r\n  }\r\n  const pnumberHandleChange = e => {\r\n    setPhoneNumber(e.target.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (editItem) {\r\n      setTitle(editItem.title)\r\n      setEmail(editItem.Email)\r\n      setPhoneNumber(editItem.Pnumber)\r\n      console.log(editItem)\r\n    } else {\r\n      setTitle('')\r\n      setEmail('')\r\n      setPhoneNumber('')\r\n    }\r\n  }, [editItem])\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"form\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Name...\"\r\n        value={title}\r\n        onChange={nameHandleChange}\r\n        required\r\n        className=\"task-input\"\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Email ID...\"\r\n        value={Email}\r\n        onChange={emailHandleChange}\r\n        required\r\n        className=\"task-input\"\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Phone number...\"\r\n        value={Pnumber}\r\n        onChange={pnumberHandleChange}\r\n        required\r\n        className=\"task-input\"\r\n      />\r\n      <div className=\"buttons\">\r\n        <button type=\"submit\" className=\"btn add-task-btn\">\r\n          {editItem ? 'Edit Data' : 'Submit Data'}\r\n        </button>\r\n        <button className=\"btn clear-btn\" onClick={clearList}>\r\n          Clear\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default DataForm\r\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>User Data</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\";\nimport DataListContextProvider from \"./Context/DataListContext\";\nimport DataList from \"./Components/DataList\";\nimport DataForm from \"./Components/DataForm\";\nimport './App.css';\nimport Header from \"./Components/Header\";\n\n\nconst App = () => {\n  return (\n    <DataListContextProvider>\n      <div className=\"container\">\n        <div className=\"app-wrapper\">\n          <Header />\n          <div className=\"main\">\n            <DataForm />\n            <DataList />\n          </div>\n        </div>\n      </div>\n    </DataListContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}